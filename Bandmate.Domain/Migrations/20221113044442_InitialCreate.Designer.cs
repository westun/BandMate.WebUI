// <auto-generated />
using System;
using BandMate.Domain.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bandmate.Domain.Migrations
{
    [DbContext(typeof(BandMateContext))]
    [Migration("20221113044442_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AccountRole", b =>
                {
                    b.Property<int>("AccountsAccountID")
                        .HasColumnType("int");

                    b.Property<int>("RolesRoleID")
                        .HasColumnType("int");

                    b.HasKey("AccountsAccountID", "RolesRoleID");

                    b.HasIndex("RolesRoleID");

                    b.ToTable("AccountRole");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"), 1L, 1);

                    b.Property<string>("B2CObjectIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.AccountCredential", b =>
                {
                    b.Property<int>("AccountCredentialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountCredentialID"), 1L, 1);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountCredentialID");

                    b.HasIndex("AccountID");

                    b.ToTable("AccountCredential");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Band", b =>
                {
                    b.Property<int>("BandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BandID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BandID");

                    b.ToTable("Bands");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.BandAccount", b =>
                {
                    b.Property<int>("BandID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("AccountID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.HasKey("BandID", "AccountID");

                    b.HasIndex("AccountID");

                    b.ToTable("BandAccounts");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.BandName", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BandNameID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BandID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("BandID");

                    b.ToTable("BandNames");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Election", b =>
                {
                    b.Property<int>("ElectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElectionID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("BandID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ElectionID");

                    b.HasIndex("BandID");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.ElectionSong", b =>
                {
                    b.Property<int>("ElectionID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("SongID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("ElectionID", "SongID");

                    b.HasIndex("SongID");

                    b.ToTable("ElectionSong");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.ElectionVote", b =>
                {
                    b.Property<int>("ElectionID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("SongID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("AccountID")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<bool>("Remove")
                        .HasColumnType("bit");

                    b.HasKey("ElectionID", "SongID", "AccountID");

                    b.HasIndex("AccountID");

                    b.HasIndex("SongID");

                    b.ToTable("ElectionVotes");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Gig", b =>
                {
                    b.Property<int>("GigID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GigID"), 1L, 1);

                    b.Property<int>("BandID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("SetListID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("VenueID")
                        .HasColumnType("int");

                    b.HasKey("GigID");

                    b.HasIndex("BandID");

                    b.HasIndex("SetListID");

                    b.HasIndex("VenueID");

                    b.ToTable("Gigs");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.PasswordResetRequest", b =>
                {
                    b.Property<int>("PasswordResetRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PasswordResetRequestID"), 1L, 1);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset>("Expires")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.HasKey("PasswordResetRequestID");

                    b.HasIndex("AccountID");

                    b.HasIndex("Token");

                    b.ToTable("PasswordResetRequests");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingID"), 1L, 1);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<double>("Priority")
                        .HasColumnType("float");

                    b.Property<double>("Rated")
                        .HasColumnType("float");

                    b.Property<int>("SongID")
                        .HasColumnType("int");

                    b.HasKey("RatingID");

                    b.HasIndex("AccountID");

                    b.HasIndex("SongID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.SetList", b =>
                {
                    b.Property<int>("SetListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SetListID"), 1L, 1);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("BandID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SetListID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BandID");

                    b.ToTable("SetLists");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.SetListItem", b =>
                {
                    b.Property<int>("SetListItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SetListItemID"), 1L, 1);

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SetListID")
                        .HasColumnType("int");

                    b.Property<int>("SongID")
                        .HasColumnType("int");

                    b.HasKey("SetListItemID");

                    b.HasIndex("SetListID");

                    b.HasIndex("SongID");

                    b.ToTable("SetListItems");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Song", b =>
                {
                    b.Property<int>("SongID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SongID"), 1L, 1);

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BandID")
                        .HasColumnType("int");

                    b.Property<int?>("Bpm")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("KeySignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LyricFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LyricURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mp3FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ReleaseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SheetMusicFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SheetMusicURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SongListTypeID")
                        .HasColumnType("int");

                    b.Property<string>("TabFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SongID");

                    b.HasIndex("BandID");

                    b.HasIndex("SongListTypeID");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.SongAccount", b =>
                {
                    b.Property<int>("SongID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("AccountID")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SongID", "AccountID");

                    b.HasIndex("AccountID");

                    b.ToTable("SongAccounts");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.SongListType", b =>
                {
                    b.Property<int>("SongListTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SongListTypeID"), 1L, 1);

                    b.Property<int>("BandID")
                        .HasColumnType("int");

                    b.Property<string>("ListTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("SongListTypeID");

                    b.HasIndex("BandID");

                    b.ToTable("SongListTypes");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Venue", b =>
                {
                    b.Property<int>("VenueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueID"), 1L, 1);

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueID");

                    b.HasIndex("AddressID");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("AccountRole", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandMate.Domain.Core.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.AccountCredential", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Account", "Account")
                        .WithMany("AccountCredentials")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.BandAccount", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Account", "Account")
                        .WithMany("BandAccounts")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandMate.Domain.Core.Models.Band", "Band")
                        .WithMany("BandAccounts")
                        .HasForeignKey("BandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Band");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.BandName", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Band", "Band")
                        .WithMany("BandNames")
                        .HasForeignKey("BandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Band");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Election", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Band", "Band")
                        .WithMany()
                        .HasForeignKey("BandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Band");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.ElectionSong", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Election", "Election")
                        .WithMany("ElectionSongs")
                        .HasForeignKey("ElectionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BandMate.Domain.Core.Models.Song", "Song")
                        .WithMany("ElectionSongs")
                        .HasForeignKey("SongID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Election");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.ElectionVote", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Account", "Account")
                        .WithMany("ElectionVotes")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BandMate.Domain.Core.Models.Election", "Election")
                        .WithMany("ElectionVotes")
                        .HasForeignKey("ElectionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BandMate.Domain.Core.Models.Song", "Song")
                        .WithMany("ElectionVotes")
                        .HasForeignKey("SongID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Election");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Gig", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Band", "Band")
                        .WithMany()
                        .HasForeignKey("BandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandMate.Domain.Core.Models.SetList", "SetList")
                        .WithMany("Gigs")
                        .HasForeignKey("SetListID");

                    b.HasOne("BandMate.Domain.Core.Models.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Band");

                    b.Navigation("SetList");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.PasswordResetRequest", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Rating", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandMate.Domain.Core.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.SetList", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandMate.Domain.Core.Models.Band", "Band")
                        .WithMany("SetLists")
                        .HasForeignKey("BandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Band");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.SetListItem", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.SetList", "SetList")
                        .WithMany("SetListItems")
                        .HasForeignKey("SetListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandMate.Domain.Core.Models.Song", "Song")
                        .WithMany("SetListItems")
                        .HasForeignKey("SongID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SetList");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Song", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Band", "Band")
                        .WithMany("Songs")
                        .HasForeignKey("BandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandMate.Domain.Core.Models.SongListType", "SongListType")
                        .WithMany()
                        .HasForeignKey("SongListTypeID");

                    b.Navigation("Band");

                    b.Navigation("SongListType");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.SongAccount", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Account", "Account")
                        .WithMany("SongAccounts")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandMate.Domain.Core.Models.Song", "Song")
                        .WithMany("SongAccounts")
                        .HasForeignKey("SongID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.SongListType", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Band", "Band")
                        .WithMany()
                        .HasForeignKey("BandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Band");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Venue", b =>
                {
                    b.HasOne("BandMate.Domain.Core.Models.Address", "Address")
                        .WithMany("Venues")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Account", b =>
                {
                    b.Navigation("AccountCredentials");

                    b.Navigation("BandAccounts");

                    b.Navigation("ElectionVotes");

                    b.Navigation("SongAccounts");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Address", b =>
                {
                    b.Navigation("Venues");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Band", b =>
                {
                    b.Navigation("BandAccounts");

                    b.Navigation("BandNames");

                    b.Navigation("SetLists");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Election", b =>
                {
                    b.Navigation("ElectionSongs");

                    b.Navigation("ElectionVotes");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.SetList", b =>
                {
                    b.Navigation("Gigs");

                    b.Navigation("SetListItems");
                });

            modelBuilder.Entity("BandMate.Domain.Core.Models.Song", b =>
                {
                    b.Navigation("ElectionSongs");

                    b.Navigation("ElectionVotes");

                    b.Navigation("SetListItems");

                    b.Navigation("SongAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
